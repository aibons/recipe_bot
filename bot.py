#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
recipe_bot ‚Äì Telegram-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–∫–∞—á–∏–≤–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ —Ä–æ–ª–∏–∫–∏
(Instagram Reels / TikTok / YouTube Shorts) –∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –∏—Ö –≤–º–µ—Å—Ç–µ
—Å —Ä–µ—Ü–µ–ø—Ç–æ–º. –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ python-telegram-bot v22.
"""

# –ï—Å–ª–∏ —Ç—ã –¥–µ–ø–ª–æ–∏—à—å –Ω–∞ Render/—Å–µ—Ä–≤–µ—Ä:
# 1. –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Render —É–∫–∞–∂–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è WEBHOOK_URL –≤–∏–¥–∞:
#    https://recipe-bot-q839.onrender.com/
#    (–∏–ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π URL —Ç–≤–æ–µ–≥–æ Render-—Å–µ—Ä–≤–∏—Å–∞)

from __future__ import annotations
import asyncio
import json
import logging
import sqlite3
import textwrap
import tempfile
import os
from pathlib import Path

print("=== FILES IN CURRENT DIR ===")
for file in Path(".").glob("*"):
    print(file)
print("============================")
from urllib.parse import urlparse
from typing import Optional, Tuple

# third-party
from aiohttp import web
from dotenv import load_dotenv
from yt_dlp import YoutubeDL
from yt_dlp.utils import DownloadError
import openai

from telegram import Update, constants
# third-party
from telegram.ext import (
    Application, ContextTypes,
    CommandHandler, MessageHandler, filters,
)

# === Markdown utils and recipe block parsing ===
def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown V2 Telegram"""
    chars = r"\_*[]()~`>#+-=|{}.!"
    return ''.join(f"\\{c}" if c in chars else c for c in text)

# –ü–∞—Ä—Å–µ—Ä –±–ª–æ–∫–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞ OpenAI (markdown -> dict)
def parse_recipe_blocks(text: str) -> dict:
    import re
    blocks = {
        "title": "",
        "ingredients": [],
        "steps": [],
        "extra": ""
    }
    # Title (–≥–∏–±–∫–æ)
    m = re.search(r"[–†—Ä]–µ—Ü–µ–ø—Ç\:?\s*([^\n\*\_\-\:\[\]\(\)\~\`\>\#\+\=\|\{\}\.\!]*)", text)
    if m:
        blocks["title"] = m.group(1).strip(" *_-:[]()~`>#+=|{}.!")
    # –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
    ingr = re.search(r"[–ò–∏]–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã\:?\**\n(.+?)(\n[–ü–ø]—Ä–∏–≥|[\n\d]+\.)", text, re.DOTALL)
    if ingr:
        ingr_lines = [i.strip('‚Ä¢-*_[]()~`>#+=|{}.!').strip() for i in ingr.group(1).strip().split('\n') if i.strip()]
        blocks["ingredients"] = ingr_lines
    # –®–∞–≥–∏
    steps = re.search(r"[–ü–ø]—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ\:?\**\n(.+?)(\n[–î–¥]–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ|$)", text, re.DOTALL)
    if steps:
        steps_lines = [s.strip("0123456789. *_-:[]()~`>#+=|{}.!").strip() for s in steps.group(1).split('\n') if s.strip()]
        blocks["steps"] = steps_lines
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
    extra = re.search(r"[–î–¥]–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ\:?\**\n(.+)", text, re.DOTALL)
    if extra:
        blocks["extra"] = extra.group(1).strip()
    return blocks

def format_recipe_markdown(recipe: dict, original_url: str = "", duration: str = "") -> str:
    lines = []
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    if recipe.get("title"):
        lines.append(f"üç≤ *{escape_markdown_v2(recipe['title'].upper())}*")
    # –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
    if recipe.get("ingredients"):
        lines.append("\nüõí *–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã*")
        for i in recipe['ingredients']:
            lines.append(f"‚Ä¢ {escape_markdown_v2(i)}")
    if recipe.get("ingredients"):
        lines.append("\n_____")
    # –®–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
    if recipe.get("steps"):
        lines.append("üë®‚Äçüç≥ *–®–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è*")
        for idx, s in enumerate(recipe['steps'], 1):
            lines.append(f"{idx}. {escape_markdown_v2(s)}")
        lines.append("\n_____")
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
    if recipe.get("extra"):
        lines.append(f"üí° *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ*\n{escape_markdown_v2(recipe['extra'])}\n\n_____")
    # –û—Ä–∏–≥–∏–Ω–∞–ª –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if original_url:
        orig = f"[–û—Ä–∏–≥–∏–Ω–∞–ª]({original_url})"
        if duration:
            orig += f" {escape_markdown_v2(f'({duration})')}"
        lines.append(orig)
    return "\n".join(lines)

# ENV
load_dotenv()

TOKEN = os.environ.get("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")

if not TOKEN:
    raise ValueError("TELEGRAM_TOKEN environment variable is required")
if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY environment variable is required")

# Cookie —Ñ–∞–π–ª—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
IG_COOKIES_FILE = os.getenv("IG_COOKIES_FILE", "cookies_instagram.txt")
TT_COOKIES_FILE = os.getenv("TT_COOKIES_FILE", "cookies_tiktok.txt")
YT_COOKIES_FILE = os.getenv("YT_COOKIES_FILE", "cookies_youtube.txt")

# Cookie —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ —Ñ–∞–π–ª–∞–º)
IG_COOKIES_CONTENT = os.getenv("IG_COOKIES_CONTENT", "")
TT_COOKIES_CONTENT = os.getenv("TT_COOKIES_CONTENT", "")
YT_COOKIES_CONTENT = os.getenv("YT_COOKIES_CONTENT", "")

OWNER_ID = int(os.getenv("OWNER_ID", "248610561"))
FREE_LIMIT = int(os.getenv("FREE_LIMIT", "6"))

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log = logging.getLogger("recipe_bot")
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s | %(message)s"
)

# –ì–ª—É—à–∏–º httpx –∏ telegram.ext._utils.networkloop –¥–æ WARNING
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram.ext._utils.networkloop").setLevel(logging.WARNING)

def init_db() -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    with sqlite3.connect("bot.db") as db:
        db.execute("""
            CREATE TABLE IF NOT EXISTS quota(
                uid INTEGER PRIMARY KEY, 
                n INTEGER DEFAULT 0
            )
        """)
        db.commit()

def get_quota_usage(uid: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–≤–æ—Ç—ã"""
    with sqlite3.connect("bot.db") as db:
        cur = db.execute("SELECT n FROM quota WHERE uid=?", (uid,))
        row = cur.fetchone()
        return row[0] if row else 0

def increment_quota(uid: int) -> int:
    """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –≤–µ—Ä–Ω—É—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"""
    with sqlite3.connect("bot.db") as db:
        cur = db.execute("SELECT n FROM quota WHERE uid=?", (uid,))
        row = cur.fetchone()
        current = row[0] if row else 0
        new_count = current + 1
        db.execute("INSERT OR REPLACE INTO quota(uid,n) VALUES(?,?)", (uid, new_count))
        db.commit()
        return new_count

def create_temp_cookies_file(content: str) -> Optional[str]:
    """–°–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª cookies –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    if not content:
        return None
    
    try:
        import tempfile
        with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.txt') as f:
            f.write(content)
            return f.name
    except Exception as e:
        log.error(f"Failed to create temp cookies file: {e}")
        return None

def get_ydl_opts(url: str) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ü–∏–∏ yt-dlp –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ URL"""
    
    # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    opts = {
        "format": "best[height<=720]/best[ext=mp4]/best",
        "quiet": True,
        "no_warnings": True,
        "extractaudio": False,
        "audioformat": "mp3",
        "outtmpl": "%(id)s.%(ext)s",
        "writesubtitles": False,
        "writeautomaticsub": False,
        "no_check_certificate": True,
        "prefer_insecure": True,
        # –î–æ–±–∞–≤–ª—è–µ–º User-Agent –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        "http_headers": {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
            "Accept-Language": "en-us,en;q=0.5",
            "Accept-Encoding": "gzip,deflate",
            "Accept-Charset": "ISO-8859-1,utf-8;q=0.7,*;q=0.7",
            "Keep-Alive": "115",
            "Connection": "keep-alive",
        },
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        "socket_timeout": 30,
        "retries": 3,
        "fragment_retries": 3,
        "retry_sleep_functions": {
            "http": lambda n: min(4**n, 60),
            "fragment": lambda n: min(4**n, 60),
        }
    }
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
    if "instagram.com" in url:
        opts.update({
            "format": "best[height<=720]/best",
            "extractor_args": {
                "instagram": {
                    "api_version": "v1",
                }
            }
        })
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º cookies –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Ñ–∞–π–ª–∞
        if IG_COOKIES_CONTENT:
            temp_cookies = create_temp_cookies_file(IG_COOKIES_CONTENT)
            if temp_cookies:
                opts["cookiefile"] = temp_cookies
        elif IG_COOKIES_FILE and Path(IG_COOKIES_FILE).exists():
            opts["cookiefile"] = IG_COOKIES_FILE
            
    elif "tiktok.com" in url or "vm.tiktok.com" in url or "vt.tiktok.com" in url:
        opts.update({
            "format": "best[height<=720]/best",
            "extractor_args": {
                "tiktok": {
                    "api_hostname": "api.tiktokv.com",
                }
            }
        })
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º cookies –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Ñ–∞–π–ª–∞
        if TT_COOKIES_CONTENT:
            temp_cookies = create_temp_cookies_file(TT_COOKIES_CONTENT)
            if temp_cookies:
                opts["cookiefile"] = temp_cookies
        elif TT_COOKIES_FILE and Path(TT_COOKIES_FILE).exists():
            opts["cookiefile"] = TT_COOKIES_FILE
            
    elif "youtube.com" in url or "youtu.be" in url:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ Shorts
        parsed = urlparse(url)
        if "youtu.be" in parsed.netloc or "/shorts" in parsed.path:
            opts.update({
                "format": "best[height<=720]/best[ext=mp4]/best",
            })
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º cookies –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Ñ–∞–π–ª–∞
            if YT_COOKIES_CONTENT:
                temp_cookies = create_temp_cookies_file(YT_COOKIES_CONTENT)
                if temp_cookies:
                    opts["cookiefile"] = temp_cookies
            elif YT_COOKIES_FILE and Path(YT_COOKIES_FILE).exists():
                opts["cookiefile"] = YT_COOKIES_FILE
        elif "youtube.com" in parsed.netloc:
            opts.update({
                "format": "best[height<=720]/best[ext=mp4]/best",
            })
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º cookies –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Ñ–∞–π–ª–∞
            if YT_COOKIES_CONTENT:
                temp_cookies = create_temp_cookies_file(YT_COOKIES_CONTENT)
                if temp_cookies:
                    opts["cookiefile"] = temp_cookies
            elif YT_COOKIES_FILE and Path(YT_COOKIES_FILE).exists():
                opts["cookiefile"] = YT_COOKIES_FILE
    
    return opts

async def download_video(url: str) -> Tuple[Optional[Path], Optional[dict]]:
    """–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
    loop = asyncio.get_running_loop()
    return await loop.run_in_executor(None, _sync_download, url)

def _sync_download(url: str) -> Tuple[Optional[Path], Optional[dict]]:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ"""
    import shutil
    temp_dir = Path(tempfile.mkdtemp())
    
    try:
        opts = get_ydl_opts(url)
        opts["outtmpl"] = str(temp_dir / "%(id)s.%(ext)s")
        
        log.info(f"Starting download for URL: {url}")
        log.info(f"Using yt-dlp options: {opts}")
        
        with YoutubeDL(opts) as ydl:
            try:
                # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏
                log.info("Extracting video info...")
                info = ydl.extract_info(url, download=False)
                
                if not info:
                    log.error("Failed to extract video info")
                    return None, None
                    
                log.info(f"Video info extracted: title='{info.get('title', 'N/A')}', duration={info.get('duration', 'N/A')}")
                
                # –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ–º
                log.info("Starting video download...")
                info = ydl.extract_info(url, download=True)
                
                if info:
                    # –ù–∞–π—Ç–∏ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
                    video_path = Path(ydl.prepare_filename(info))
                    log.info(f"Expected file path: {video_path}")
                    
                    if video_path.exists():
                        log.info(f"Video downloaded successfully: {video_path} (size: {video_path.stat().st_size} bytes)")
                        return video_path, info
                    else:
                        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –≤ temp_dir
                        log.warning("Expected file not found, searching in temp directory...")
                        video_files = list(temp_dir.glob("*"))
                        log.info(f"Files in temp directory: {video_files}")
                        
                        for file in temp_dir.glob("*"):
                            if file.is_file() and file.suffix.lower() in ['.mp4', '.mkv', '.webm', '.mov', '.avi', '.flv']:
                                log.info(f"Found video file: {file} (size: {file.stat().st_size} bytes)")
                                return file, info
                        
                        log.error("No video files found in temp directory")
                        
                return None, None
                
            except DownloadError as e:
                error_msg = str(e).lower()
                log.error(f"yt-dlp Download error: {e}")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
                if "private" in error_msg or "login" in error_msg:
                    log.error("Video is private or requires authentication")
                elif "not available" in error_msg or "removed" in error_msg:
                    log.error("Video is not available or has been removed")
                elif "geo" in error_msg or "country" in error_msg:
                    log.error("Video is geo-blocked")
                elif "copyright" in error_msg:
                    log.error("Video is blocked due to copyright")
                else:
                    log.error(f"Unknown download error: {error_msg}")
                    
                return None, None
                
            except Exception as e:
                log.error(f"Unexpected error during yt-dlp extraction: {e}")
                return None, None
                
    except Exception as e:
        log.error(f"Unexpected error during download setup: {e}")
        return None, None
    finally:
        # Cleanup temporary directory and all its contents
        try:
            shutil.rmtree(temp_dir, ignore_errors=True)
        except Exception as cleanup_error:
            log.warning(f"Failed to cleanup temp directory {temp_dir}: {cleanup_error}")

async def extract_recipe_from_video(video_info: dict) -> str:
    """–ò–∑–≤–ª–µ—á—å —Ä–µ—Ü–µ–ø—Ç –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É—è OpenAI"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º title –∏ description –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        title = video_info.get('title', '')
        description = video_info.get('description', '')
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not title and not description:
            return "ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ä–µ—Ü–µ–ø—Ç –∏–∑ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ —Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º."
        
        prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –∏ –∏–∑–≤–ª–µ–∫–∏ —Ä–µ—Ü–µ–ø—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å:

        –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}
        –û–ø–∏—Å–∞–Ω–∏–µ: {description}

        –ï—Å–ª–∏ –≤ –≤–∏–¥–µ–æ –µ—Å—Ç—å —Ä–µ—Ü–µ–ø—Ç, –≤—ã–≤–µ–¥–∏ –µ–≥–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
        üìù **–†–µ—Ü–µ–ø—Ç: [–Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞]**
        
        ü•ò **–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**
        ‚Ä¢ [—Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤]
        
        üë®‚Äçüç≥ **–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:**
        1. [–ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏]

        üí° **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:**
        –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–æ–±–∞–≤—å –µ—ë —Å—é–¥–∞.

        –ï—Å–ª–∏ —Ä–µ—Ü–µ–ø—Ç–∞ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ "–í —ç—Ç–æ–º –≤–∏–¥–µ–æ –Ω–µ—Ç —Ä–µ—Ü–µ–ø—Ç–∞." –∏ –ø—Ä–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è.
        """
        
        client = openai.OpenAI(api_key=OPENAI_API_KEY)
        response = await asyncio.get_event_loop().run_in_executor(
            None,
            lambda: client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ—Ü–µ–ø—Ç—ã –∏–∑ –æ–ø–∏—Å–∞–Ω–∏–π –≤–∏–¥–µ–æ. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=1000,
                temperature=0.7
            )
        )
        
        recipe = response.choices[0].message.content.strip()
        return recipe if recipe else "ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ä–µ—Ü–µ–ø—Ç –∏–∑ –≤–∏–¥–µ–æ."
        
    except Exception as e:
        log.error(f"Error extracting recipe: {e}")
        return "ü§ñ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

def is_supported_url(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ URL"""
    supported_patterns = [
        # Instagram
        'instagram.com/reel', 'instagram.com/p/', 'instagram.com/tv/',
        # TikTok
        'tiktok.com/@', 'tiktok.com/t/', 'vm.tiktok.com', 'vt.tiktok.com',
        # YouTube
        'youtube.com/shorts/', 'youtu.be/', 'youtube.com/watch?v=',
    ]
    
    try:
        parsed = urlparse(url.lower())
        domain = parsed.netloc.lower()
        path = parsed.path.lower()
        full_url = f"{domain}{path}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–æ–º–µ–Ω—ã
        if any(domain in ['instagram.com', 'www.instagram.com'] for domain in [domain]):
            return '/reel' in path or '/p/' in path or '/tv/' in path
        
        if any(domain in ['tiktok.com', 'www.tiktok.com', 'vm.tiktok.com', 'vt.tiktok.com'] for domain in [domain]):
            return True
            
        if any(domain in ['youtube.com', 'www.youtube.com', 'youtu.be', 'www.youtu.be'] for domain in [domain]):
            return '/shorts/' in path or 'youtu.be' in domain or 'v=' in parsed.query
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
        return any(pattern in full_url for pattern in supported_patterns)
        
    except (ValueError, TypeError, AttributeError) as e:
        log.warning(f"Invalid URL format: {url}, error: {e}")
        return False

# Welcome —Ç–µ–∫—Å—Ç
WELCOME = """
üî• **Recipe Bot** ‚Äî –∏–∑–≤–ª–µ–∫–∞—é —Ä–µ—Ü–µ–ø—Ç –∏–∑ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –≤–∏–¥–µ–æ!

–ë–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ **6** —Ä–æ–ª–∏–∫–æ–≤.
–¢–∞—Ä–∏—Ñ—ã (—Å–∫–æ—Ä–æ):

- 10 —Ä–æ–ª–∏–∫–æ–≤ ‚Äî 49 ‚ÇΩ
- 200 —Ä–æ–ª–∏–∫–æ–≤ + 30 –¥–Ω. ‚Äî 199 ‚ÇΩ

–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å —Ä–µ—Ü–µ–ø—Ç–æ–º, –∞ —è —Å–∫–∞—á–∞—é –µ–≥–æ –∏ –∏–∑–≤–ª–µ–∫—É —Ä–µ—Ü–µ–ø—Ç!

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
üì± Instagram: Reels (/reel/, /p/, /tv/)
üéµ TikTok: @username/video/, vm.tiktok.com, vt.tiktok.com
üì∫ YouTube: Shorts (/shorts/), –æ–±—ã—á–Ω—ã–µ –≤–∏–¥–µ–æ

**–ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–æ–∫:**
‚Ä¢ instagram.com/reel/xyz...
‚Ä¢ tiktok.com/@user/video/123...
‚Ä¢ youtube.com/shorts/abc...
""".strip()

# Handlers
async def cmd_start(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        escape_markdown_v2(WELCOME),
        parse_mode=constants.ParseMode.MARKDOWN_V2
    )

async def cmd_status(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    uid = update.effective_user.id
    used = get_quota_usage(uid)
    
    if uid == OWNER_ID:
        status_text = "üëë –í—ã –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ - –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ"
    else:
        remaining = max(0, FREE_LIMIT - used)
        status_text = f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used}/{FREE_LIMIT}\nüÜì –û—Å—Ç–∞–ª–æ—Å—å: {remaining}"
    
    await update.message.reply_text(status_text, parse_mode=None)

async def handle_url(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ URL-–æ–≤"""
    url = update.message.text.strip()
    uid = update.effective_user.id

    await update.message.reply_text("üèÉ –°–∫–∞—á–∏–≤–∞—é...", parse_mode=None)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö URL
    if not is_supported_url(url):
        await update.message.reply_text(
            "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏!\n\n"
            "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:\n"
            "üì± Instagram: /reel/, /p/, /tv/\n"
            "üéµ TikTok: @username/video/, vm.tiktok.com, vt.tiktok.com\n"
            "üì∫ YouTube: /shorts/, –æ–±—ã—á–Ω—ã–µ –≤–∏–¥–µ–æ\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫:\n"
            "‚Ä¢ instagram.com/reel/CXXxXxX...\n"
            "‚Ä¢ tiktok.com/@username/video/123...\n"
            "‚Ä¢ youtube.com/shorts/abc123...",
            parse_mode=None
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
    if uid != OWNER_ID:
        current_usage = get_quota_usage(uid)
        if current_usage >= FREE_LIMIT:
            await update.message.reply_text(
                "‚ÑπÔ∏è –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–æ–ª–∏–∫–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω.",
                parse_mode=None
            )
            return

    # –ü–æ–∫–∞–∑–∞—Ç—å "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await update.message.chat.send_action(constants.ChatAction.TYPING)

    # --- fallback_md –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –≤—Å–µ–≥–¥–∞ ---
    fallback_blocks = {
        "title": "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ä–µ—Ü–µ–ø—Ç",
        "ingredients": [],
        "steps": [],
        "extra": "ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ä–µ—Ü–µ–ø—Ç –∏–∑ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏–∫–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ–¥ –≤–∏–¥–µ–æ."
    }
    fallback_md = format_recipe_markdown(
        fallback_blocks,
        original_url=url,
        duration=""
    )
    video_info = None
    video_path = None
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
        video_path, video_info = await download_video(url)

        # –ï—Å–ª–∏ video_info —É–∂–µ –µ—Å—Ç—å ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º fallback_md —Å –µ–≥–æ –¥–∞–Ω–Ω—ã–º–∏
        if video_info:
            fallback_blocks["title"] = video_info.get("title", "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ä–µ—Ü–µ–ø—Ç").strip()
            fallback_md = format_recipe_markdown(
                fallback_blocks,
                original_url=video_info.get("webpage_url", url),
                duration=str(int(video_info.get("duration", 0))) + " —Å–µ–∫." if "duration" in video_info else ""
            )

        # –Ø–≤–Ω—ã–π –ª–æ–≥, –µ—Å–ª–∏ video_path –∏–ª–∏ video_info –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
        if not video_path or not video_path.exists():
            log.error(f"Download failed or file does not exist for url: {url}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            if "instagram.com" in url:
                error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å Instagram Reels. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –í–∏–¥–µ–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç\n‚Ä¢ –í–∏–¥–µ–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ\n‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å Instagram API"
            elif "tiktok.com" in url:
                error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å TikTok –≤–∏–¥–µ–æ. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –í–∏–¥–µ–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ\n‚Ä¢ –í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ\n‚Ä¢ –í–∏–¥–µ–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∞–≤—Ç–æ—Ä–æ–º"
            elif "youtube.com" in url or "youtu.be" in url:
                error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å YouTube –≤–∏–¥–µ–æ. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –í–∏–¥–µ–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É\n‚Ä¢ –í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ\n‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä—Å–∫–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏"
            else:
                error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É."
                
            await update.message.reply_text(error_msg, parse_mode=None)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º fallback_md (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫)
            await update.message.reply_text(
                fallback_md,
                parse_mode=constants.ParseMode.MARKDOWN_V2,
                disable_web_page_preview=True,
            )
            return
            
        if not video_info:
            log.error(f"Download returned no video_info for url: {url}")
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É.",
                parse_mode=None
            )
            await update.message.reply_text(
                fallback_md,
                parse_mode=constants.ParseMode.MARKDOWN_V2,
                disable_web_page_preview=True,
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (Telegram –ª–∏–º–∏—Ç 50MB)
        file_size = video_path.stat().st_size
        if file_size > 50 * 1024 * 1024:  # 50MB
            await update.message.reply_text(
                "‚ùå –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–º–∞–∫—Å–∏–º—É–º 50MB).",
                parse_mode=None
            )
            video_path.unlink(missing_ok=True)
            await update.message.reply_text(
                fallback_md,
                parse_mode=constants.ParseMode.MARKDOWN_V2,
                disable_web_page_preview=True,
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –°–†–ê–ó–£ (caption –ø—É—Å—Ç–æ–π, —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)
        with open(video_path, 'rb') as video_file:
            await update.message.reply_video(
                video=video_file,
                caption="",  # Caption –ø—É—Å—Ç–æ–π –∏–ª–∏ –º–∞–∫—Å–∏–º—É–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                parse_mode=None
            )

        # fallback_md —É–∂–µ –∞–∫—Ç—É–∞–ª–µ–Ω (—Å web_url –∏ title)
        try:
            recipe = await extract_recipe_from_video(video_info)
            log.info(f"Extracted recipe raw:\n{recipe}")
            blocks = parse_recipe_blocks(recipe)
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, –∏–ª–∏ —Ç–æ–ª—å–∫–æ —Å –æ—à–∏–±–∫–æ–π ‚Äî fallback —à–∞–±–ª–æ–Ω
            invalid = (
                not recipe or recipe.strip().startswith("ü§ñ")
                or not (blocks["title"] or blocks["ingredients"] or blocks["steps"])
            )
            if invalid:
                md = fallback_md
            else:
                md = format_recipe_markdown(
                    blocks,
                    original_url=video_info.get("webpage_url", url),
                    duration=str(int(video_info.get("duration", 0))) + " —Å–µ–∫." if "duration" in video_info else ""
                )
        except Exception as err:
            log.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞: {err}")
            md = fallback_md  # fallback –ø–æ —à–∞–±–ª–æ–Ω—É!

        await update.message.reply_text(
            md,
            parse_mode=constants.ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True,
        )

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if uid != OWNER_ID:
            increment_quota(uid)

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        video_path.unlink(missing_ok=True)

    except Exception as e:
        log.error(f"Error processing URL {url}: {e}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –¥–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        error_type = type(e).__name__
        if "timeout" in str(e).lower():
            error_msg = "‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É."
        elif "network" in str(e).lower() or "connection" in str(e).lower():
            error_msg = "üåê –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
        elif "permission" in str(e).lower() or "access" in str(e).lower():
            error_msg = "üîí –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∏–¥–µ–æ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ."
        else:
            error_msg = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ.\n–¢–∏–ø –æ—à–∏–±–∫–∏: {error_type}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."
        
        await update.message.reply_text(error_msg, parse_mode=None)
        
        # fallback_md —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –≤–∏–¥–µ–æ_info –Ω–µ—Ç ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω)
        await update.message.reply_text(
            fallback_md,
            parse_mode=constants.ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True,
        )

# Health check –¥–ª—è Render
async def health_check(request: web.Request) -> web.Response:
    """Health check endpoint"""
    return web.Response(text="OK", status=200)

def create_web_app(application: Application) -> web.Application:
    """–°–æ–∑–¥–∞—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è health check –∏ webhook"""
    app = web.Application()
    app.router.add_get("/", health_check)
    app.router.add_get("/health", health_check)

    async def telegram_webhook(request: web.Request) -> web.Response:
        data = await request.json()
        await application.process_update(Update.de_json(data, application.bot))
        return web.Response(text="OK")

    app.router.add_post("/", telegram_webhook)
    return app

async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    init_db()
    
    # –°–æ–∑–¥–∞–µ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", cmd_start))
    application.add_handler(CommandHandler("status", cmd_status))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_url))
    
    # –°–æ–∑–¥–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è health check + webhook
    web_app = create_web_app(application)
    runner = web.AppRunner(web_app)
    await runner.setup()
    
    port = int(os.environ.get("PORT", 8080))
    site = web.TCPSite(runner, host="0.0.0.0", port=port)
    await site.start()
    
    log.info(f"Health check server started on port {port}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
    await application.initialize()
    WEBHOOK_URL = os.environ.get("WEBHOOK_URL")
    if WEBHOOK_URL:
        await application.bot.set_webhook(url=WEBHOOK_URL)
        log.info(f"Webhook set to: {WEBHOOK_URL}")
        await application.start()  # –ó–∞–ø—É—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ webhook!
    else:
        # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏ –º–æ–∂–Ω–æ fallback –Ω–∞ polling
        log.warning("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω. –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ polling (–ª–æ–∫–∞–ª—å–Ω–æ).")
        await application.start()
        await application.updater.start_polling(drop_pending_updates=True)
    
    log.info("Recipe bot started successfully!")
    
    try:
        # –î–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        await asyncio.Event().wait()
    except KeyboardInterrupt:
        log.info("Shutting down...")
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        await application.stop()
        await application.shutdown()
        await runner.cleanup()

if __name__ == "__main__":
    asyncio.run(main())
