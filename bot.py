#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
recipe_bot ‚Äì Telegram-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–∫–∞—á–∏–≤–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ —Ä–æ–ª–∏–∫–∏
(Instagram Reels / TikTok / YouTube Shorts) –∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –∏—Ö –≤–º–µ—Å—Ç–µ
—Å —Ä–µ—Ü–µ–ø—Ç–æ–º. –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ python-telegram-bot v22.
"""

from __future__ import annotations
import asyncio
import json
import logging
import sqlite3
import textwrap
import tempfile
import os
from pathlib import Path
from urllib.parse import urlparse
from typing import Optional, Tuple

# third-party
from aiohttp import web
from dotenv import load_dotenv
from yt_dlp import YoutubeDL
from yt_dlp.utils import DownloadError
import openai

from telegram import Update, constants
from telegram.ext import (
    Application, ContextTypes,
    CommandHandler, MessageHandler, filters,
)
from telegram.helpers import escape_markdown

# ENV
load_dotenv()

TOKEN = os.environ.get("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")

if not TOKEN:
    raise ValueError("TELEGRAM_TOKEN environment variable is required")
if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY environment variable is required")

# Cookie —Ñ–∞–π–ª—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
IG_COOKIES_FILE = os.getenv("IG_COOKIES_FILE", "")
TT_COOKIES_FILE = os.getenv("TT_COOKIES_FILE", "")
YT_COOKIES_FILE = os.getenv("YT_COOKIES_FILE", "")

OWNER_ID = int(os.getenv("OWNER_ID", "248610561"))
FREE_LIMIT = int(os.getenv("FREE_LIMIT", "6"))

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log = logging.getLogger("recipe_bot")
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s | %(message)s"
)

# –ì–ª—É—à–∏–º httpx –∏ telegram.ext._utils.networkloop –¥–æ WARNING
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram.ext._utils.networkloop").setLevel(logging.WARNING)

def init_db() -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    Path("data").mkdir(exist_ok=True)
    with sqlite3.connect("data/usage.db") as db:
        db.execute("""
            CREATE TABLE IF NOT EXISTS quota(
                uid INTEGER PRIMARY KEY, 
                n INTEGER DEFAULT 0
            )
        """)
        db.commit()

def get_quota_usage(uid: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–≤–æ—Ç—ã"""
    with sqlite3.connect("data/usage.db") as db:
        cur = db.execute("SELECT n FROM quota WHERE uid=?", (uid,))
        row = cur.fetchone()
        return row[0] if row else 0

def increment_quota(uid: int) -> int:
    """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –≤–µ—Ä–Ω—É—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"""
    with sqlite3.connect("data/usage.db") as db:
        cur = db.execute("SELECT n FROM quota WHERE uid=?", (uid,))
        row = cur.fetchone()
        current = row[0] if row else 0
        new_count = current + 1
        db.execute("INSERT OR REPLACE INTO quota(uid,n) VALUES(?,?)", (uid, new_count))
        db.commit()
        return new_count

def get_ydl_opts(url: str) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ü–∏–∏ yt-dlp –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ URL"""
    opts = {
        "format": "best[height<=720]/best",
        "quiet": True,
        "no_warnings": True,
        "extractaudio": False,
        "audioformat": "mp3",
        "outtmpl": "%(id)s.%(ext)s",
        "writesubtitles": False,
        "writeautomaticsub": False,
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º cookies –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if "instagram.com" in url and IG_COOKIES_FILE and Path(IG_COOKIES_FILE).exists():
        opts["cookiefile"] = IG_COOKIES_FILE
    elif "tiktok.com" in url and TT_COOKIES_FILE and Path(TT_COOKIES_FILE).exists():
        opts["cookiefile"] = TT_COOKIES_FILE
    elif "youtube.com" in url and YT_COOKIES_FILE and Path(YT_COOKIES_FILE).exists():
        opts["cookiefile"] = YT_COOKIES_FILE
    
    return opts

async def download_video(url: str) -> Tuple[Optional[Path], Optional[dict]]:
    """–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
    loop = asyncio.get_running_loop()
    return await loop.run_in_executor(None, _sync_download, url)

def _sync_download(url: str) -> Tuple[Optional[Path], Optional[dict]]:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ"""
    temp_dir = Path(tempfile.mkdtemp())
    
    try:
        opts = get_ydl_opts(url)
        opts["outtmpl"] = str(temp_dir / "%(id)s.%(ext)s")
        
        with YoutubeDL(opts) as ydl:
            try:
                info = ydl.extract_info(url, download=True)
                if info:
                    # –ù–∞–π—Ç–∏ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
                    video_path = Path(ydl.prepare_filename(info))
                    if video_path.exists():
                        return video_path, info
                    else:
                        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –≤ temp_dir
                        for file in temp_dir.glob("*"):
                            if file.is_file() and file.suffix in ['.mp4', '.mkv', '.webm', '.mov']:
                                return file, info
                return None, None
            except DownloadError as e:
                log.error(f"Download error: {e}")
                return None, None
    except Exception as e:
        log.error(f"Unexpected error during download: {e}")
        return None, None

async def extract_recipe_from_video(video_info: dict) -> str:
    """–ò–∑–≤–ª–µ—á—å —Ä–µ—Ü–µ–ø—Ç –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É—è OpenAI"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º title –∏ description –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        title = video_info.get('title', '')
        description = video_info.get('description', '')
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not title and not description:
            return "ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ä–µ—Ü–µ–ø—Ç –∏–∑ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ —Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º."
        
        prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –∏ –∏–∑–≤–ª–µ–∫–∏ —Ä–µ—Ü–µ–ø—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å:

        –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}
        –û–ø–∏—Å–∞–Ω–∏–µ: {description}

        –ï—Å–ª–∏ –≤ –≤–∏–¥–µ–æ –µ—Å—Ç—å —Ä–µ—Ü–µ–ø—Ç, –≤—ã–≤–µ–¥–∏ –µ–≥–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
        üìù **–†–µ—Ü–µ–ø—Ç: [–Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞]**
        
        ü•ò **–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**
        ‚Ä¢ [—Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤]
        
        üë®‚Äçüç≥ **–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:**
        1. [–ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏]
        
        –ï—Å–ª–∏ —Ä–µ—Ü–µ–ø—Ç–∞ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ "–í —ç—Ç–æ–º –≤–∏–¥–µ–æ –Ω–µ—Ç —Ä–µ—Ü–µ–ø—Ç–∞."
        """
        
        client = openai.OpenAI(api_key=OPENAI_API_KEY)
        response = await asyncio.get_event_loop().run_in_executor(
            None,
            lambda: client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ—Ü–µ–ø—Ç—ã –∏–∑ –æ–ø–∏—Å–∞–Ω–∏–π –≤–∏–¥–µ–æ. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=1000,
                temperature=0.7
            )
        )
        
        recipe = response.choices[0].message.content.strip()
        return recipe if recipe else "ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ä–µ—Ü–µ–ø—Ç –∏–∑ –≤–∏–¥–µ–æ."
        
    except Exception as e:
        log.error(f"Error extracting recipe: {e}")
        return "ü§ñ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

def is_supported_url(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ URL"""
    supported_domains = [
        'instagram.com', 'tiktok.com', 'youtube.com', 'youtu.be',
        'vm.tiktok.com', 'vt.tiktok.com'
    ]
    
    try:
        parsed = urlparse(url)
        domain = parsed.netloc.lower()
        return any(supported in domain for supported in supported_domains)
    except:
        return False

# Welcome —Ç–µ–∫—Å—Ç
WELCOME = escape_markdown(textwrap.dedent("""
üî• *Recipe Bot* ‚Äî —Å–æ—Ö—Ä–∞–Ω—è—é —Ä–µ—Ü–µ–ø—Ç –∏–∑ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –≤–∏–¥–µ–æ!

–ë–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ *6* —Ä–æ–ª–∏–∫–æ–≤.
–¢–∞—Ä–∏—Ñ—ã (—Å–∫–æ—Ä–æ):

‚Ä¢ 10 —Ä–æ–ª–∏–∫–æ–≤ ‚Äî 49 ‚ÇΩ  
‚Ä¢ 200 —Ä–æ–ª–∏–∫–æ–≤ + 30 –¥–Ω. ‚Äî 199 ‚ÇΩ  

–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Reels / Shorts / TikTok, –∞ –æ—Å—Ç–∞–ª—å–Ω–æ–µ —è —Å–¥–µ–ª–∞—é —Å–∞–º!

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:
‚Ä¢ Instagram Reels
‚Ä¢ TikTok
‚Ä¢ YouTube Shorts
""").strip(), version=2)

# Handlers
async def cmd_start(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        WELCOME, 
        parse_mode=constants.ParseMode.MARKDOWN_V2
    )

async def cmd_status(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    uid = update.effective_user.id
    used = get_quota_usage(uid)
    
    if uid == OWNER_ID:
        status_text = "üëë –í—ã –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ - –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ"
    else:
        remaining = max(0, FREE_LIMIT - used)
        status_text = f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used}/{FREE_LIMIT}\nüÜì –û—Å—Ç–∞–ª–æ—Å—å: {remaining}"
    
    await update.message.reply_text(status_text)

async def handle_url(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ URL-–æ–≤"""
    url = update.message.text.strip()
    uid = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö URL
    if not is_supported_url(url):
        await update.message.reply_text(
            "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ –Ω–∞ Instagram Reels, TikTok –∏ YouTube Shorts"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
    if uid != OWNER_ID:
        current_usage = get_quota_usage(uid)
        if current_usage >= FREE_LIMIT:
            await update.message.reply_text("‚ÑπÔ∏è –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–æ–ª–∏–∫–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω.")
            return
    
    # –ü–æ–∫–∞–∑–∞—Ç—å "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await update.message.chat.send_action(constants.ChatAction.TYPING)
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
        video_path, video_info = await download_video(url)
        
        if not video_path or not video_path.exists():
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (Telegram –ª–∏–º–∏—Ç 50MB)
        file_size = video_path.stat().st_size
        if file_size > 50 * 1024 * 1024:  # 50MB
            await update.message.reply_text("‚ùå –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–º–∞–∫—Å–∏–º—É–º 50MB).")
            video_path.unlink(missing_ok=True)
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ—Ü–µ–ø—Ç
        recipe = await extract_recipe_from_video(video_info)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å —Ä–µ—Ü–µ–ø—Ç–æ–º
        await update.message.chat.send_action(constants.ChatAction.UPLOAD_VIDEO)
        
        with open(video_path, 'rb') as video_file:
            await update.message.reply_video(
                video=video_file,
                caption=recipe[:1024],  # Telegram –ª–∏–º–∏—Ç –¥–ª—è caption
                parse_mode=constants.ParseMode.MARKDOWN_V2 if recipe.startswith("üìù") else None
            )
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if uid != OWNER_ID:
            increment_quota(uid)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        video_path.unlink(missing_ok=True)
        
    except Exception as e:
        log.error(f"Error processing URL {url}: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# Health check –¥–ª—è Render
async def health_check(request: web.Request) -> web.Response:
    """Health check endpoint"""
    return web.Response(text="OK", status=200)

def create_web_app() -> web.Application:
    """–°–æ–∑–¥–∞—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è health check"""
    app = web.Application()
    app.router.add_get("/", health_check)
    app.router.add_get("/health", health_check)
    return app

async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    init_db()
    
    # –°–æ–∑–¥–∞–µ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", cmd_start))
    application.add_handler(CommandHandler("status", cmd_status))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_url))
    
    # –°–æ–∑–¥–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è health check
    web_app = create_web_app()
    runner = web.AppRunner(web_app)
    await runner.setup()
    
    port = int(os.environ.get("PORT", 8080))
    site = web.TCPSite(runner, host="0.0.0.0", port=port)
    await site.start()
    
    log.info(f"Health check server started on port {port}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
    await application.initialize()
    await application.start()
    await application.updater.start_polling(drop_pending_updates=True)
    
    log.info("Recipe bot started successfully!")
    
    try:
        # –î–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        await asyncio.Event().wait()
    except KeyboardInterrupt:
        log.info("Shutting down...")
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        await application.stop()
        await application.shutdown()
        await runner.cleanup()

if __name__ == "__main__":
    asyncio.run(main())