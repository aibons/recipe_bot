#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
recipe_bot ‚Äî Telegram-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–∫–∞—á–∏–≤–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ —Ä–æ–ª–∏–∫–∏
(Instagram Reels / TikTok / YouTube Shorts) –∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –∏—Ö –≤–º–µ—Å—Ç–µ
—Å —Ä–µ—Ü–µ–ø—Ç–æ–º. –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ python-telegram-bot v22.

–ì–ª–∞–≤–Ω–æ–µ –æ—Ç–ª–∏—á–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏:
‚Ä¢ yt-dlp –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ (asyncio.to_thread), —Å–∞–º     
  —Å–∫–∞—á–∏–≤–∞—Ç–µ–ª—å download() —Ç–µ–ø–µ—Ä—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π ‚Üí —É—à–ª–∞ –æ—à–∏–±–∫–∞
  "coroutine object has no attribute read_bytes".
‚Ä¢ long-poll –∏ health-check –Ω–∞ :8080 –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑
  asyncio.gather, –ø–æ—ç—Ç–æ–º—É –Ω–µ—Ç RuntimeError "This event loop is
  already running".
‚Ä¢ –≤—Å–µ —Ç–µ–∫—Å—Ç—ã —ç–∫—Ä–∞–Ω–∏—Ä—É—é—Ç—Å—è Markdown V2 ‚Üí Telegram –Ω–µ —Ä—É–≥–∞–µ—Ç—Å—è.
‚Ä¢ cookies —á–∏—Ç–∞—é—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–æ–≤ (–ø—É—Ç–∏ —É–∫–∞–∂–∏—Ç–µ –≤ .env):
    IG_COOKIES_FILE, TT_COOKIES_FILE, YT_COOKIES_FILE
"""

# ‚îÄ‚îÄ stdlib ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
from __future__ import annotations

import asyncio
import datetime as dt
import json
import logging
import os
import sqlite3
import subprocess
import textwrap
from pathlib import Path
from urllib.parse import urlparse

import shutil  # –¥–ª—è which(ffmpeg)

# ‚îÄ‚îÄ 3-rd party ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
from aiohttp import web
from dotenv import load_dotenv
from yt_dlp import YoutubeDL
from yt_dlp.utils import DownloadError
import openai  # noqa: F401   (–∫–ª—é—á –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –ø–æ–∑–∂–µ)

from telegram import Update, constants
from telegram.ext import (
    Application,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
)
from telegram.helpers import escape_markdown

# ‚îÄ‚îÄ ENV ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
TOKEN: str = os.getenv("TELEGRAM_TOKEN", "")
OWNER_ID: int = int(os.getenv("OWNER_ID", "0"))  # ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞
FREE_LIMIT = 6  # –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–æ–ª–∏–∫–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# ‚îÄ‚îÄ logging ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s | %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)
log = logging.getLogger("recipe_bot")

# ‚îÄ‚îÄ sqlite: —Å—á—ë—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
DB_PATH = Path("quota.db")

def init_db() -> None:
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute(
        """CREATE TABLE IF NOT EXISTS quota (
                uid INTEGER PRIMARY KEY,
                used INTEGER NOT NULL DEFAULT 0
            );"""
    )
    conn.commit()
    conn.close()

def quota_use(uid: int) -> int:
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("INSERT OR IGNORE INTO quota(uid, used) VALUES(?, 0);", (uid,))
    cur.execute("UPDATE quota SET used = used + 1 WHERE uid = ?;", (uid,))
    cur.execute("SELECT used FROM quota WHERE uid = ?;", (uid,))
    used: int = cur.fetchone()[0]
    conn.commit()
    conn.close()
    return used

# ‚îÄ‚îÄ yt-dlp —Å–∫–∞—á–∏–≤–∞—Ç–µ–ª—å ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def download(url: str) -> tuple[Path, dict]:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ä–æ–ª–∏–∫ —á–µ—Ä–µ–∑ yt-dlp –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (Path, info)."""

    ffmpeg = shutil.which("ffmpeg") or "ffmpeg"

    opts: dict = {
        "outtmpl": "%(title)s.%(ext)s",
        "quiet": True,
        "ffmpeg_location": ffmpeg,
    }

    try:
        with YoutubeDL(opts) as ydl:
            info = ydl.extract_info(url, download=True)
            return Path(ydl.prepare_filename(info)), info
    except DownloadError as e:
        raise RuntimeError("yt-dlp: " + str(e)) from e

# ‚îÄ‚îÄ Telegram handlers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
WELCOME = escape_markdown(textwrap.dedent(
    """
    üî• *Recipe Bot* ‚Äî —Å–æ—Ö—Ä–∞–Ω—è—é —Ä–µ—Ü–µ–ø—Ç –∏–∑ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –≤–∏–¥–µ–æ!

    –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ *6* —Ä–æ–ª–∏–∫–æ–≤\.
    –¢–∞—Ä–∏—Ñ—ã \(—Å–∫–æ—Ä–æ\):

    ‚Ä¢ 10 —Ä–æ–ª–∏–∫–æ–≤ + 7 –¥–Ω\. - 49 ‚ÇΩ
    ‚Ä¢ 200 —Ä–æ–ª–∏–∫–æ–≤ + 30 –¥–Ω\. ‚Äî 199 ‚ÇΩ

    –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Reels / Shorts / TikTok, –∞ –æ—Å—Ç–∞–ª—å–Ω–æ–µ —è —Å–¥–µ–ª–∞—é —Å–∞–º\!
    """),
    version=2,
)

async def cmd_start(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(WELCOME, parse_mode=constants.ParseMode.MARKDOWN_V2)

# ‚îÄ‚îÄ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å—Å—ã–ª–æ–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def handle(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    url = update.message.text.strip()
    uid = update.effective_user.id

    # –ª–∏–º–∏—Ç
    if uid != OWNER_ID and quota_use(uid) > FREE_LIMIT:
        await update.message.reply_text("‚ö†Ô∏è –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–æ–ª–∏–∫–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω.")
        return

    # —ç—Ñ—Ñ–µ–∫—Ç ¬´–ø–µ—á–∞—Ç–∞–µ—Ç/–∑–∞–≥—Ä—É–∂–∞–µ—Ç¬ª
    await update.message.chat.send_action(constants.ChatAction.TYPING)

    try:
        video_path, info = await asyncio.to_thread(download, url)  # ‚Üê sync ‚Üí thread
    except Exception as e:
        log.warning("download failure: %s", e)
        await update.message.reply_text("‚ùå –ù–µ —Å–º–æ–≥ —Å–∫–∞—á–∞—Ç—å —ç—Ç–æ –≤–∏–¥–µ–æ.")
        return

    await update.message.chat.send_action(constants.ChatAction.UPLOAD_VIDEO)
    await update.message.reply_video(
        video=video_path.read_bytes(),
        caption="‚úÖ –ì–æ—Ç–æ–≤–æ!",
    )
    video_path.unlink(missing_ok=True)

# ‚îÄ‚îÄ AIOHTTP health –Ω–∞ / ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def health(_: web.Request) -> web.Response:
    return web.Response(text="ok")

def aio_app() -> web.Application:
    app = web.Application()
    app.add_routes([web.get("/", health)])
    return app

# ‚îÄ‚îÄ main: long-poll + aiohttp –≤ –æ–¥–Ω–æ–º loop ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main() -> None:
    init_db()

    app = (
        Application.builder()
        .token(TOKEN)
        .build()
    )

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle))

    await asyncio.gather(
        app.initialize(),           # –µ—Å–ª–∏ init —É–ø–∞–¥—ë—Ç ‚Üí —Å—Ä–∞–∑—É –ø—Ä–µ–∫—Ä–∞—Ç–∏–º
        return_exceptions=False,
    )

    await asyncio.gather(
        app.start(),                # –∑–∞–ø—É—Å–∫–∞–µ–º long-polling Updater
        app.updater.start_polling(  # —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å web
            allowed_updates=[constants.UpdateType.MESSAGE]
        ),
        web._run_app(aio_app(), port=8080),  # health-check –¥–ª—è Render
    )

if __name__ == "__main__":
    asyncio.run(main())
