#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
recipe_bot ‚Äî Telegram-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–∫–∞—á–∏–≤–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ —Ä–æ–ª–∏–∫–∏
(Instagram Reels / TikTok / YouTube Shorts) –∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –∏—Ö –≤–º–µ—Å—Ç–µ
—Å —Ä–µ—Ü–µ–ø—Ç–æ–º.  –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ python-telegram-bot v22.

‚Ä¢ long-polling –∏ health-check –Ω–∞ :8080 –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
  —á–µ—Ä–µ–∑ asyncio ‚Äî –±–µ–∑ –æ—à–∏–±–∫–∏ ¬´RuntimeError: This event loop is already running¬ª.
‚Ä¢ –í—Å–µ —Ç–µ–∫—Å—Ç—ã —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ Markdown V2 ‚Üí Telegram –Ω–µ —Ä—É–≥–∞–µ—Ç—Å—è.
‚Ä¢ cookies –±–µ—Ä—É—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–æ–≤ (—É–∫–∞–∂–∏—Ç–µ –ø—É—Ç–∏ –≤ .env):
    IG_COOKIES_FILE, TT_COOKIES_FILE, YT_COOKIES_FILE
"""

# ‚îÄ‚îÄ stdlib ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
from __future__ import annotations
import asyncio
import logging
import os
import sqlite3
import textwrap
from pathlib import Path
from urllib.parse import urlparse

# ‚îÄ‚îÄ 3-rd party ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
from aiohttp import web
from dotenv import load_dotenv
from yt_dlp import YoutubeDL
from yt_dlp.utils import DownloadError
from telegram import Update, constants
from telegram.ext import (
    Application,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
)
from telegram.helpers import escape_markdown

# ‚îÄ‚îÄ ENV & config ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
TOKEN           = os.getenv("TELEGRAM_TOKEN", "")
OWNER_ID        = int(os.getenv("OWNER_ID", "0"))            # –∫–æ–º—É –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ
FREE_LIMIT      = int(os.getenv("FREE_LIMIT", "6"))            # –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–æ–ª–∏–∫–æ–≤
IG_COOKIES_FILE = os.getenv("IG_COOKIES_FILE", "")
TT_COOKIES_FILE = os.getenv("TT_COOKIES_FILE", "")
YT_COOKIES_FILE = os.getenv("YT_COOKIES_FILE", "")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s | %(message)s",
)
log = logging.getLogger("recipe_bot")

# ‚îÄ‚îÄ tiny SQLite –¥–ª—è —Å—á—ë—Ç—á–∏–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–∫–∞—á–∏–≤–∞–Ω–∏–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
DB_PATH = Path("quota.db")

def init_db() -> None:
    with sqlite3.connect(DB_PATH) as con:
        con.execute(
            """CREATE TABLE IF NOT EXISTS quota (
                    uid   INTEGER PRIMARY KEY,
                    used  INTEGER NOT NULL DEFAULT 0
                )"""
        )


def quota_use(uid: int, inc: int = 1) -> int:
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."""
    with sqlite3.connect(DB_PATH) as con:
        cur = con.cursor()
        cur.execute("INSERT OR IGNORE INTO quota(uid, used) VALUES(?, 0)", (uid,))
        cur.execute("UPDATE quota SET used = used + ? WHERE uid = ?", (inc, uid))
        cur.execute("SELECT used FROM quota WHERE uid = ?", (uid,))
        (used,) = cur.fetchone()
    return used


# ‚îÄ‚îÄ yt-dlp ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
DL_OPTS = {
    "quiet": True,
    "cookiefile": None,  # –±—É–¥–µ—Ç –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    "paths": {"home": str(Path.cwd())},
    "outtmpl": "%(.id)s.%(ext)s",
    "merge_output_format": "mp4",
}

async def download(url: str) -> tuple[Path, dict]:
    """–°–∫–∞—á–∏–≤–∞–µ–º —Ä–æ–ª–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å loop."""
    # –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º cookies –ø–æ –¥–æ–º–µ–Ω—É
    host = urlparse(url).hostname or ""
    if "instagram" in host and IG_COOKIES_FILE:
        DL_OPTS["cookiefile"] = IG_COOKIES_FILE
    elif "tiktok" in host and TT_COOKIES_FILE:
        DL_OPTS["cookiefile"] = TT_COOKIES_FILE
    elif YT_COOKIES_FILE:
        DL_OPTS["cookiefile"] = YT_COOKIES_FILE

    def _dl() -> tuple[Path, dict]:
        with YoutubeDL(DL_OPTS) as ydl:
            info = ydl.extract_info(url, download=True)
            return Path(ydl.prepare_filename(info)), info

    try:
        return await asyncio.to_thread(_dl)
    except DownloadError as e:
        raise RuntimeError("yt-dlp: " + str(e)) from e


# ‚îÄ‚îÄ Telegram UI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
WELCOME = escape_markdown(
    textwrap.dedent(
        """
        üî• *Recipe Bot* ‚Äî —Å–æ—Ö—Ä–∞–Ω—è—é —Ä–µ—Ü–µ–ø—Ç –∏–∑ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –≤–∏–¥–µ–æ!

        –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ *6* —Ä–æ–ª–∏–∫–æ–≤\.
        –¢–∞—Ä–∏—Ñ—ã \(—Å–∫–æ—Ä–æ\):

        ‚Ä¢ 100 —Ä–æ–ª–∏–∫–æ–≤ ‚Äî 299 ‚ÇΩ
        ‚Ä¢ 200 —Ä–æ–ª–∏–∫–æ–≤ + 30 –¥–Ω\. ‚Äî 199 ‚ÇΩ

        –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Reels / Shorts / TikTok, –∞ –æ—Å—Ç–∞–ª—å–Ω–æ–µ —è —Å–¥–µ–ª–∞—é —Å–∞–º\!
        """
    ).strip(),
    version=2,
)


async def cmd_start(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:  # noqa: D401
    await update.message.reply_text(WELCOME, parse_mode=constants.ParseMode.MARKDOWN_V2)


# ‚îÄ‚îÄ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å—Å—ã–ª–æ–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def handle(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    url = update.message.text.strip()
    uid = update.effective_user.id

    # –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç
    if uid != OWNER_ID and quota_use(uid) > FREE_LIMIT:
        await update.message.reply_text("‚ö†Ô∏è –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–æ–ª–∏–∫–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω.")
        return

    # ¬´–ø–µ—á–∞—Ç–∞–µ—Ç¬ª
    await update.message.chat.send_action(constants.ChatAction.TYPING)
    try:
        video_path, _info = await download(url)
    except Exception as e:  # noqa: BLE001
        log.warning("download failure: %s", e)
        await update.message.reply_text("‚ùå –ù–µ —Å–º–æ–≥ —Å–∫–∞—á–∞—Ç—å —ç—Ç–æ –≤–∏–¥–µ–æ.")
        return

    # ¬´–∑–∞–≥—Ä—É–∂–∞–µ—Ç¬ª
    await update.message.chat.send_action(constants.ChatAction.UPLOAD_VIDEO)
    await update.message.reply_video(video=video_path.read_bytes(), caption="‚úÖ –ì–æ—Ç–æ–≤–æ!")
    video_path.unlink(missing_ok=True)


# ‚îÄ‚îÄ aiohttp health-check ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def health(_: web.Request) -> web.Response:
    return web.Response(text="ok")


def aio_app() -> web.Application:
    app = web.Application()
    app.add_routes([web.get("/", health)])
    return app


# ‚îÄ‚îÄ main: long-poll + aiohttp –≤ –æ–¥–Ω–æ–º loop ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main() -> None:
    init_db()

    application = (
        Application.builder()
        .token(TOKEN)
        .build()
    )

    application.add_handler(CommandHandler("start", cmd_start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle))

    # health-check runner (aiohttp) ------------------------------------------------
    runner = web.AppRunner(aio_app())
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=8080)
    await site.start()

    # Telegram polling ------------------------------------------------------------
    await application.initialize()
    await application.start()
    await application.updater.start_polling(
        allowed_updates=[constants.UpdateType.MESSAGE],
        drop_pending_updates=True,
    )

    # —Ä–∞–±–æ—Ç–∞–µ–º, –ø–æ–∫–∞ –Ω–µ –ø—Ä–µ—Ä–≤—É—Ç
    await application.updater.idle()

    # graceful shutdown ------------------------------------------------------------
    await application.stop()
    await application.shutdown()
    await runner.cleanup()


if __name__ == "__main__":
    asyncio.run(main())